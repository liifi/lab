apiVersion: provisioning.cattle.io/v1
kind: Cluster
metadata:
  name: c01
  annotations:
    {}
#    key: string
  labels:
    {}
#    key: string
  namespace: fleet-default
spec:
  defaultPodSecurityPolicyTemplateName: ''
  kubernetesVersion: v1.24.4+rke2r1
  localClusterAuthEndpoint:
    caCerts: ''
    enabled: false
    fqdn: ''
  rkeConfig:
    etcd:
      disableSnapshots: false
      s3:
#        bucket: string
#        cloudCredentialName: string
#        endpoint: string
#        endpointCA: string
#        folder: string
#        region: string
#        skipSSLVerify: boolean
      snapshotRetention: 5
      snapshotScheduleCron: 0 */5 * * *
    machineGlobalConfig:
      cluster-cidr: 10.211.16.0/20
      service-cidr: 10.211.32.0/20
      cluster-dns: 10.211.32.10
      cluster-domain: c01.k.$DOMAIN
      cni: cilium
      disable-kube-proxy: [true]
    chartValues:
      rke2-cilium:
        # ----
        # Native Routing (assuming CIDR is within layer2 routable cidr)
        tunnel: disabled
        autoDirectNodeRoutes: true
        ipv4NativeRoutingCIDR: 10.0.0.0/8 # Cover at least the cluster if not all clusters meshed or entire private private subnet with 10.0.0.0/8 as long as routable
        bpf:
          lbExternalClusterIP: true # Allows external access to ClusterIP services
        loadBalancer:
          mode: hybrid # Allows SNAT for UDP and DSR for TCP
        # ----
        # Replace kube-proxy
        kubeProxyReplacement: strict
        k8sServiceHost: 10.211.0.10 # Ideally load balance it instead of the first controller
        k8sServicePort: 6443
        # ----
        # Hubble
        hubble:
          enabled: true
          relay:
            enabled: true
          ui:
            enabled: true
            ingress:
              enabled: true
              # hosts: [ netc01.$DOMAIN ] # Use external zone?
        # ----
        # Cluster Mesh - (Manual steps https://docs.cilium.io/en/stable/gettingstarted/clustermesh/clustermesh/)
        #              - Using clustermesh with native routing
        #                - Without bgp (summarized static routes on routers instead) requires autoDirectNodeRoutes for auto managed routes,
        #                  but if clusters are on separate subnet cilium will print warning messages of not being able to update routing table as other cluster nodes aren't on same layer 2
        #                - If replacing kube proxy and using DSR or Hybrid to retain client ip, using on a service the global annotation
        #                  will work with east/west traffic as the source ip will be of the pod (as long as it is in the proper subnet)
        #                  but south/west traffic generated from outside the subnet will bounce out of it with a source ip that doesn't
        #                  belong there so the router my not route
        # Hack of image change, otherwise cilium cli will fail externally as it depends on image name to find a valid agent
        image:
          repository: quay.io/cilium/cilium # otherwise cilium cli will fail externally as it depends on image name to find a valid agent
        # External workloads has to be enabled so "clustermesh-apiserver-client-cert" is created
        externalWorkloads:
          enabled: true
        tls:
          ca:
            cert: &cacert ___
            key: &cakey ___
        cluster:
          id: 1
          name: c01
        clustermesh:
          useAPIServer: true
          config:
            enabled: true
            # domain:  # only used if ips provided instead of addresses
            clusters: []
            # Update cluster after knowing the generated apiserver tls.client or provide one during creation
            # - name: c02
            #   address: clustermesh-apiserver.kube-system.svc.c02.k.$DOMAIN
            #   port: 2379
            #   tls: # the secret generated by helm will be "clustermesh-apiserver-client-cert"
            #     cert: ___
            #     key: ___
          apiserver:
            service:
              type: ClusterIP
            tls:
              ca:
                cert: *cacert
                key: *cakey
    machinePools:
#      - cloudCredentialSecretName: string
#        controlPlaneRole: boolean
#        displayName: string
#        drainBeforeDelete: boolean
#        drainBeforeDeleteTimeout: string
#        etcdRole: boolean
#        labels:
#          key: string
#        machineConfigRef:
#          apiVersion: string
#          fieldPath: string
#          kind: string
#          name: string
#          namespace: string
#          resourceVersion: string
#          uid: string
#        machineDeploymentAnnotations:
#          key: string
#        machineDeploymentLabels:
#          key: string
#        machineOS: string
#        maxUnhealthy: string
#        name: string
#        nodeStartupTimeout: string
#        paused: boolean
#        quantity: int
#        rollingUpdate:
#          maxSurge: string
#          maxUnavailable: string
#        taints:
#          - effect: string
#            key: string
#            timeAdded: string
#            value: string
#        unhealthyNodeTimeout: string
#        unhealthyRange: string
#        workerRole: boolean
    machineSelectorConfig:
      - config:
          protect-kernel-defaults: false
#      - config:
#          
#        machineLabelSelector:
#          matchExpressions:
#            - key: string
#              operator: string
#              values:
#                - string
#          matchLabels:
#            key: string
    registries:
      configs:
        {}
        #authConfigSecretName: string
#          caBundle: string
#          insecureSkipVerify: boolean
#          tlsSecretName: string
      mirrors:
        {}
        #endpoint:
#            - string
#          rewrite:
#            key: string
    upgradeStrategy:
      controlPlaneConcurrency: '1'
      controlPlaneDrainOptions:
        deleteEmptyDirData: true
        disableEviction: false
        enabled: false
        force: false
        gracePeriod: -1
        ignoreDaemonSets: true
        ignoreErrors: false
        skipWaitForDeleteTimeoutSeconds: 0
        timeout: 120
#        postDrainHooks:
#          - annotation: string
#        preDrainHooks:
#          - annotation: string
      workerConcurrency: '1'
      workerDrainOptions:
        deleteEmptyDirData: true
        disableEviction: false
        enabled: false
        force: false
        gracePeriod: -1
        ignoreDaemonSets: true
        ignoreErrors: false
        skipWaitForDeleteTimeoutSeconds: 0
        timeout: 120
#        postDrainHooks:
#          - annotation: string
#        preDrainHooks:
#          - annotation: string
#    additionalManifest: string
#    etcdSnapshotCreate:
#      generation: int
#    etcdSnapshotRestore:
#      generation: int
#      name: string
#      restoreRKEConfig: string
#    infrastructureRef:
#      apiVersion: string
#      fieldPath: string
#      kind: string
#      name: string
#      namespace: string
#      resourceVersion: string
#      uid: string
#    provisionGeneration: int
#    rotateCertificates:
#      generation: int
#      services:
#        - string
#    rotateEncryptionKeys:
#      generation: int
  machineSelectorConfig:
    - config: {}
#  agentEnvVars:
#    - name: string
#      value: string
#  cloudCredentialSecretName: string
#  clusterAPIConfig:
#    clusterName: string
#  defaultClusterRoleForProjectMembers: string
#  enableNetworkPolicy: boolean
#  redeploySystemAgentGeneration: int
__clone: true